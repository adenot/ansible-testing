#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2014, Allan Denot <adenot@gmail.com>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

from pprint import pprint
import grp

DOCUMENTATION = '''
---
module: test_file
version_added: 1.5
short_description: Check file and directory permissions
description:
  - Check permissions such as mode, owner and group of file or directory
options: 
  path: 
    description:
    - path to the file or directory to check its permissions
    required: True
    default: null
  mode:
    description:
    - expected mode of the file/directory
    required: False
    default: null
  owner: 
    description: 
    - expected owner of the file/directory
    required: False
    default: null
  group: 
    description: 
    - expected group of the file/directory
    required: False
    default: null
  state:
    description:
    - Check for the state of the resource. Options are: C(directory), C(file), C(absent)
    required: false
    default: file
    choices: [ file, directory, absent, hard, link ]
  src:
    required: false
    default: null
    choices: []
    description:
      - path of the file to link to (applies only to C(state=link)). Will accept absolute,
        relative and nonexisting paths. Relative paths are not expanded.

author: Allan Denot
'''

EXAMPLES = '''
# Check if python app is running
test_file: path=/etc/tmpfile mode=0755 owner=adenot group=users
'''

def file_stat(filename):
    filename = os.path.expanduser(filename)
    st = os.lstat(filename)
    group = grp.getgrgid(st.st_gid).gr_name
    user = pwd.getpwuid(st.st_uid).pw_name

    mode = oct(st.st_mode & 0777)

    return { 'group': group, 'user': user, 'mode': mode }

def main():
    module = AnsibleModule(
        argument_spec = dict(
            path=dict(required=True, default=None),
            mode=dict(required=False),
            owner=dict(required=False),
            group=dict(required=False),
            src=dict(required=False),
            state=dict(choices=['file','directory','absent','hard','link'], default='file'),
        ),
        supports_check_mode=True
    )
    state = module.params['state']
    mode = module.params.get('mode')
    owner = module.params.get('owner')
    group = module.params.get('group')
    src = module.params.get('src')

    path = os.path.expanduser(module.params['path'])

    if os.path.lexists(path):
        if os.path.islink(path):
            actual_state = 'link'
        elif os.path.isdir(path):
            actual_state = 'directory'
        elif os.stat(path).st_nlink > 1:
            actual_state = 'hard'
        else:
            # could be many other things, but defaulting to file
            actual_state = 'file'
    else:
        if state == 'absent':
            module.exit_json()
        else:
            module.fail_json(msg="%s does not exist" % path)

    if actual_state != 'absent' and state == 'absent':
        module.fail_json(msg='file or directory is not absent')

    file_attrs = file_stat(module.params['path'])

    if state != actual_state and state != 'absent':
        module.fail_json(msg="%s is not a %s" % (path, state))

    if mode and file_attrs['mode'] != mode:
        module.fail_json(msg="%s does not have mode %s" % (path, state))
    
    if owner and file_attrs['user'] != owner:
        module.fail_json(msg="%s is not owned by %s" % (path, owner))
    
    if group and file_attrs['group'] != group:
        module.fail_json(msg="%s does not have group %s" % (path, group))

    if state in ['link','hard']:
        abs_src = os.path.join(os.path.dirname(path), os.path.basename(os.readlink(path)))
        if not os.path.exists(abs_src):
            module.fail_json(msg='src file %s does not exist' % src)

        if state == 'hard':
            if not os.path.isabs(src):
                module.fail_json(msg="absolute paths are required")

        if actual_state == 'link':
            old_src = os.path.join(os.path.dirname(path), os.path.basename(os.readlink(path)))
            if old_src != src:
                module.fail_json(msg="link %s source does not match %s" % (path, old_src))

    module.exit_json()
    

from ansible.module_utils.basic import *
main()

