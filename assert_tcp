#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2014, Will Thames <will@thames.id.au>
# (c) 2014, Allan Denot <adenot@gmail.com>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.


DOCUMENTATION = '''
---
module: assert_tcp
version_added: 1.5
short_description: Check if a tcp connection can be made
description:
  - Check if a TCP connection can be made to a host on a port
options: 
  name: 
    description:
    - host to connect to, including port
    required: True
    default: null
  should_be: 
    description: 
    - state of the port
    choices: [ 'open', 'closed' ]
    default: open
  with_timeout: 
    description:
    - time in seconds to wait for a response
    required: False
    default: 5
author: Will Thames
'''

EXAMPLES = '''
# Check if port 80 is open on a server
assert_tcp: name=localhost:80 should_be=open with_timeout=30
'''
import socket

def main():
    module = AnsibleModule(
        argument_spec = dict(
            name=dict(required=True, default=None),
            should_be=dict(choices=['open', 'closed'], required=True),
            with_timeout=dict(required=False, default=5, type='int'),
        ),
        supports_check_mode=True
    )
    host = module.params.get('name').split(":")[0]
    port = module.params.get('name').split(":")[1]
    state = module.params.get('should_be')
    timeout = module.params.get('with_timeout')
    
    s = None
    for res in socket.getaddrinfo(host, port, socket.AF_UNSPEC, socket.SOCK_STREAM):
        af, socktype, proto, canonname, sa = res
        try: 
            s = socket.socket(af, socktype, proto)
        except socket.error, msg:
            s = None
            continue
        try:
            s.settimeout(timeout)
            s.connect(sa)
        except socket.error, msg:
            s.close()
            s = None
            continue
        break
    
    if s is None:
        if state == 'open':
            module.fail_json(msg='Port %s is closed on %s, it should be open' % (port, host))
        if state == 'closed':
            module.exit_json()
    else:
        if state == 'open':
            module.exit_json()
        if state == 'closed':
            module.fail_json(msg='Port %s is open on %s, it should be closed' % (port,host))
        s.close()

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()