#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2014, Will Thames <will@thames.id.au>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.


DOCUMENTATION = '''
---
module: check_process
version_added: 1.5
short_description: Check the status of a process
description:
  - Check if a process is running or not
options: 
  name: 
    description:
    - name of the process to check
    required: True
    default: null
  args:
    description:
    - list of one or more arguments to look for
    required: False
    default: []
  state: 
    description: 
    - state of the process
    choices: [ 'present', 'absent' ]
    default: present
author: Will Thames
'''

EXAMPLES = '''
# Check if python app is running
check_process: name=python state=present args=['app.py']
'''

def check_process_for_arg(process, arg): 
    return arg in ' '.join(process.split()[1:])


def check_process(process, name, args):
    if not re.match(r'([^ ]*/)?%s\b' % name, process):
        return False 
    if not args:
        return True
    for arg in args: 
        if not check_process_for_arg(process, arg):
            return False
    return True


def main():
    module = AnsibleModule(
        argument_spec = dict(
            name=dict(required=True, default=None),
            args=dict(type='list', required=False, default=[]),
            state=dict(choices=['present', 'absent'], default='present'),
        )
    )
    name = module.params.get('name')
    args = module.params.get('args')
    state = module.params.get('state')

    # Would like this to be more cross platform
    rc, stdout, stderr = module.run_command(['ps', 'axww', '-o', 'command'])
    processes = stdout.split('\n')[1:]
    
    process_running = filter(lambda x: check_process(x, name, args), processes)
    if state == 'present':
        if process_running:
            module.exit_json()
        else:
            module.fail_json(msg="Process with name %s not found with arguments %s" % (name,args))
    if state == 'absent':
        if process_running:
            module.fail_json(msg="Process with name %s was unexpectedly found" % name)
        else:
            module.exit_json()

from ansible.module_utils.basic import *

main()

